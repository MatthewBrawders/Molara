#!/usr/bin/env bash
set -euo pipefail

CMD="${1:-help}"
API_URL="${API_URL:-http://localhost/api}"
WEB_URL="${WEB_URL:-http://localhost}"

pretty() {
  if command -v jq >/dev/null 2>&1; then jq .
  elif command -v python3 >/dev/null 2>&1; then python3 -m json.tool
  elif command -v python  >/dev/null 2>&1; then python  -m json.tool
  else cat; fi
}

is_wsl() { grep -qi microsoft /proc/version 2>/dev/null; }
is_msys() {
  case "${MSYSTEM:-$(uname -s)}" in
    MINGW*|MSYS*|CYGWIN*) return 0;; *) return 1;;
  esac
}

wait_http() {
  local url="$1"; local tries="${2:-60}"
  for _ in $(seq 1 "$tries"); do
    if curl -fsS "$url" -o /dev/null >/dev/null 2>&1; then return 0; fi
    sleep 1
  done
  return 1
}

open_browser() {
  echo "[INFO] Opening $WEB_URL ..."
  if is_msys; then
    command -v powershell.exe >/dev/null 2>&1 && { powershell.exe -NoLogo -NoProfile -Command "Start-Process '$WEB_URL'" >/dev/null 2>&1 & return 0; }
    command -v cmd.exe       >/dev/null 2>&1 && { cmd.exe /C start "" "$WEB_URL" >/dev/null 2>&1 & return 0; }
  fi
  if is_wsl; then
    command -v wslview       >/dev/null 2>&1 && { wslview "$WEB_URL" >/dev/null 2>&1 & return 0; }
    command -v powershell.exe>/dev/null 2>&1 && { powershell.exe -NoLogo -NoProfile -Command "Start-Process '$WEB_URL'" >/dev/null 2>&1 & return 0; }
  fi
  command -v xdg-open >/dev/null 2>&1 && { xdg-open "$WEB_URL" >/dev/null 2>&1 & return 0; }
  command -v open     >/dev/null 2>&1 && { open "$WEB_URL"      >/dev/null 2>&1 & return 0; }
  echo "[WARN] Could not auto-open. Please open: $WEB_URL"
}

case "$CMD" in
  up)
    docker compose up -d --build
    wait_http "$API_URL/health" 60  || echo "[WARN] API not reachable yet: $API_URL/health"
    open_browser
    ;;

  restart)
    docker compose down
    docker compose up -d --build
    wait_http "$API_URL/health" 60  || echo "[WARN] API not reachable yet: $API_URL/health"
    open_browser
    ;;

  build)
    docker compose build
    ;;

  down)
    docker compose down
    ;;

  clean|prune)
    docker compose down -v
    ;;

  logs)
    docker compose logs -f
    ;;

  ps)
    docker compose ps
    ;;

  health)
    curl -s "$API_URL/health" | pretty
    ;;

  search)
    # ./dev search "kinase receptor phosphorylation" [top_k]
    q="${2:-kinase receptor phosphorylation}"
    k="${3:-3}"
    curl -s "$API_URL/search" \
      -H 'content-type: application/json' \
      -d "{\"query\":\"$q\",\"top_k\":$k}" | pretty
    ;;

  add-chunk)
    # ./dev add-chunk "Book Title" "Section" 0 "Your textâ€¦"
    bt="${2:-Kinase Handbook}"
    sec="${3:-Intro}"
    idx="${4:-0}"
    body="${5:-Receptor tyrosine kinases (RTKs) are...}"
    curl -s "$API_URL/chunks/auto" \
      -H 'content-type: application/json' \
      -d "{\"book_title\":\"$bt\",\"section\":\"$sec\",\"chunk_idx\":$idx,\"body\":\"$body\"}" | pretty
    ;;

  web-build)
    # Rebuild the Vite app via the frontend builder service
    docker compose run --rm frontend
    docker compose restart nginx || true
    ;;

  open)
    open_browser
    ;;

  help|*)
    cat <<'USAGE'
Usage: ./dev <command>

Core:
  up            Build & start services, wait for API, open browser
  restart       Rebuild & restart, wait for API, open browser
  build         Build images only
  down          Stop and remove containers
  clean         Stop containers & remove volumes (DB data!)
  logs          Follow logs
  ps            Show service status

API shortcuts:
  health        GET /api/health
  search [q] [k]    POST /api/search    (default q="kinase receptor phosphorylation", k=3)
  add-chunk [title] [section] [idx] [body]   POST /api/chunks/auto

Frontend:
  web-build     Run the frontend build container and refresh Nginx content
  open          Open the site in your browser

Env overrides:
  API_URL (default http://localhost/api)
  WEB_URL (default http://localhost)
USAGE
    ;;
esac
