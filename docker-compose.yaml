services:
  db:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: textbook
      TZ: UTC
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d textbook"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 5s
    restart: unless-stopped

  migrate:
    image: pgvector/pgvector:pg16
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres
    command: >
      bash -lc '
      until pg_isready -h db -U postgres -d textbook; do sleep 1; done;
      psql -h db -U postgres -d textbook -v ON_ERROR_STOP=1 -f /migrations/001_init.sql
      '
    volumes:
      - ./backend/migrations:/migrations:ro
    restart: "no"

  ollama:
    image: ollama/ollama:latest
    ports: ["11434:11434"]
    volumes:
      - ollama:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0:11434     # no scheme here
      OLLAMA_KEEP_ALIVE: 15m         # keep runner warm (useful on CPU)
    healthcheck:
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 60
      start_period: 5s
    restart: unless-stopped

  # pull model in background; don't block API start
  ollama-init:
    image: ollama/ollama:latest
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      OLLAMA_HOST: http://ollama:11434
      GEN_MODEL: ${GEN_MODEL:-deepseek-r1:7b}   # <- your preferred default
    volumes:
      - ollama:/root/.ollama
    entrypoint: ["/bin/sh","-lc"]
    command: >
      'set -e;
       echo "[INFO] Waiting for Ollama (list)…";
       until ollama list >/dev/null 2>&1; do sleep 1; done;
       echo "[INFO] Pulling ${GEN_MODEL} …";
       ollama pull "${GEN_MODEL}";
       echo "[INFO] Model ready."'
    restart: "no"

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/textbook}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      EMBEDDING_DIM: ${EMBEDDING_DIM:-384}
      IVFFLAT_PROBES: ${IVFFLAT_PROBES:-10}
      OLLAMA_URL: ${OLLAMA_URL:-http://ollama:11434}
      GEN_MODEL: ${GEN_MODEL:-deepseek-r1:7b}
      TZ: UTC
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      ollama:
        condition: service_healthy
      # not blocking on ollama-init completion
    healthcheck:
      # use python stdlib (no curl/wget dependency)
      test: ["CMD", "python", "-c", "import urllib.request,sys; urllib.request.urlopen('http://127.0.0.1:8000/health'); sys.exit(0)"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 10s
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
    command: sh -c "rm -rf /webroot/* && cp -r /app/dist/* /webroot/"
    environment:
      NODE_ENV: production
    volumes:
      - webroot:/webroot
    depends_on:
      api:
        condition: service_healthy
    restart: "no"

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_completed_successfully
    ports: ["80:80"]
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - webroot:/usr/share/nginx/html:ro
    restart: unless-stopped

  adminer:
    image: adminer
    ports: ["8080:8080"]
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
  webroot:
  ollama:
